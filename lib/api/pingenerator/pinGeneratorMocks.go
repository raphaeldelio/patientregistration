// Code generated by MockGen. DO NOT EDIT.
// Source: pinGenerator.go

// Package pingenerator is a generated GoMock package.
package pingenerator

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPinGenerator is a mock of PinGenerator interface.
type MockPinGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockPinGeneratorMockRecorder
}

// MockPinGeneratorMockRecorder is the mock recorder for MockPinGenerator.
type MockPinGeneratorMockRecorder struct {
	mock *MockPinGenerator
}

// NewMockPinGenerator creates a new mock instance.
func NewMockPinGenerator(ctrl *gomock.Controller) *MockPinGenerator {
	mock := &MockPinGenerator{ctrl: ctrl}
	mock.recorder = &MockPinGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPinGenerator) EXPECT() *MockPinGeneratorMockRecorder {
	return m.recorder
}

// GeneratePin mocks base method.
func (m *MockPinGenerator) GeneratePin() (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GeneratePin")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GeneratePin indicates an expected call of GeneratePin.
func (mr *MockPinGeneratorMockRecorder) GeneratePin() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GeneratePin", reflect.TypeOf((*MockPinGenerator)(nil).GeneratePin))
}
